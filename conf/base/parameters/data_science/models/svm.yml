svm.model_artifact:

  optuna:
    kwargs_study:
      direction: maximize
      study_name: "svm"
      load_if_exists: False

    # how many trials should optimize
    kwargs_optimize:
      n_trials: 10

    # sampler
    sampler:
      class: optuna.samplers.TPESampler
      kwargs:
        n_startup_trials: 0
        constant_liar: True
        seed: ${GLOBAL_SEED}

    # pruner
    pruner:
      class: optuna.pruners.SuccessiveHalvingPruner
      kwargs: {}

  # how reward function is
  # cross val strategy
  cv_strategy:
    class: sklearn.model_selection.StratifiedKFold
    kwargs:
      n_splits: 5
      random_state: ${GLOBAL_SEED}
      shuffle: True

  # cross val score
  cv_score:
    scoring: "f1_weighted"
    class: sklearn.model_selection.cross_val_predict
    kwargs:
      estimator:
      X: # leave as None
      y: # leave as None
      cv: # leave as None
      n_jobs: -1
      method: predict

  target: "survived"
  features:
    - passenger_class
    - passenger_age
    - passenger_siblings
    - passenger_parch
    - passenger_fare
    - passenger_ticket_number
    - passenger_ticket_unknown_base
    - passenger_cabin_number
    - passenger_number_of_family_onboard
    - passenger_is_single
    - passenger_has_childs
    - passenger_cabin_level_a
    - passenger_cabin_level_b
    - passenger_cabin_level_c
    - passenger_cabin_level_d
    - passenger_cabin_level_e
    # - passenger_cabin_level_f
    # - passenger_cabin_level_g
    # - passenger_cabin_level_t
    - passenger_cabin_level_unknown
    - passenger_embarked_port_c
    - passenger_embarked_port_q
    - passenger_embarked_port_s
    # - passenger_embarked_port_unknown
    - passenger_sex_female
    - passenger_cabin_cluster_feature
    - passenger_embarked_port_cluster_feature
    - passenger_ticket_number_cluster_feature
    - passenger_family_cluster_feature
    - passenger_social_status_cluster_feature


  pipeline:
    # Order of pipeline must be preserved in order to build model
    # data imputer is optimized during cross validation
    imputer:
      class: project.packages.modelling.models.unsupervised.imputer.ColumnsPreserverImputer
      kwargs:
        imputer_params:
          class: sklearn.impute.KNNImputer
          kwargs:
            n_neighbors: 'trial.suggest_int("knn_imputer__n_neighbors", 2, 20, step=1)'
            weights: 'trial.suggest_categorical("knn_imputer__weights", ["distance", "uniform"])'

    # scaler
    scaler:
      class: project.packages.modelling.transformers.scaler.ColumnsPreserverScaler
      kwargs:
        scaler_params:
          class: 'trial.suggest_categorical("scaler__transformer", ["sklearn.preprocessing.PowerTransformer", "sklearn.preprocessing.QuantileTransformer", "sklearn.preprocessing.RobustScaler"])'
          # class: 'trial.suggest_categorical("scaler__transformer", ["project.packages.modelling.transformers.scaler.NotScalerTransformer",])'
          kwargs: {}

    # feature selector
    feature_selector:
      class: project.packages.modelling.feature_selection.feature_selector_pipeline.FeatureSelector
      kwargs:
        fs_params:
          selectors: ["model_based"]
          model_based:
            bypass_features:
              - passenger_sex_female
            estimator:
              class: xgboost.XGBClassifier
              kwargs:
                n_estimators: 'trial.suggest_int("fs_mb_xgboost__n_estimators", 10, 500, step=10)'
                max_depth: 'trial.suggest_int("fs_mb_xgboost__max_depth", 2, 10)'
                random_state: ${GLOBAL_SEED}
            threshold: 'trial.suggest_float("fs_mb__threshold", 0.001, 0.1)'
            prefit: False

    # model
    model:
      class: sklearn.svm.SVC
      kwargs:
        C: 'trial.suggest_float("svm__C", 0.001, 10)'
        kernel: 'trial.suggest_categorical("svm__kernel", ["linear", "poly", "rbf"])'
        degree: 'trial.suggest_int("svm__degree", 5, 10)'
        gamma: 'trial.suggest_float("svm__gamma", 0.0001, 1)'
        random_state: ${GLOBAL_SEED}
